{
  "title": "Kitchensink quickstart",
  "sections": [
 {
      "title": "__START HERE__",
      "paragraphs": [
        {
"text": "<br>Welcome! You can now start evaluating EAP 7 with the kitchensink quickstart using Eclipse Che. <br><br>You can view the running application in your browser by clicking the preview link in the processes pane below: <br><img src=\"https://raw.githubusercontent.com/hwindzio/kitchensink-example-master-src-main-webapp-resources-gfx-/master/preview2.PNG\" height=\"50\" width=\"400\"> <br><br>You can also run commands to stop, build, deploy and start JBoss by clicking the play button on the top navigation bar and selecting the command you want: <br><img src=\"https://raw.githubusercontent.com/hwindzio/kitchensink-example-master-src-main-webapp-resources-gfx-/master/command3.PNG\" height=\"60\" width=\"250\"> <br><br> You can make changes to the quickstart code, then select the command to ‘Stop, build, deploy and start JBoss’ to see your changes take effect in the application.<br><br>"
}
      ]
    },

 {
      "title": "__Introduction to the kichensink quickstart__",
      "paragraphs": [
        {
          "text": "<br>This quickstart shows off all the new features of Java EE 7, and makes a great starting point for your project.<br><br><b>Bean Validation 1.1</b><br><br> Bean Validation is an update specification for Java EE 7, inspired by Hibernate Validator. It allows application developers to specify constraints once (often in their domain model), and have them applied in all layers of the application, protecting data and giving useful feedback to users. <br><br> <b>JAX-RS: The Java API for RESTful Web Services</b><br><br>JAX-RS is an update specification for Java EE 7. It allows application developers to easily expose Java services as RESTful web services.<br><br>"
        }
      ]
    },
    {
      "title": "__The kitchensink example in depth__",
      "paragraphs": [
        {
          "text": "<br>The kitchensink application shows off a number of Java EE technologies such as CDI, JSF, EJB, JTA, JAX-RS and Arquillian. It does this by providing a member registration database, available via JSF and JAX-RS.<br/><br/>As usual, let’s start by looking at the necessary deployment descriptors. By now, we're very used to seeing <b>beans.xml</b> and <b>faces-config.xml</b> in <b>WEB-INF/</b>(which can be found in the <b>src/main/webapp</b> directory of the example). Notice that, once again, we don’t need a web.xml. There are two configuration files in <b>WEB-INF/classes/META-INF</b> (which can be found in the <b>src/main/resources</b> directory of the example) — <b>persistence.xml</b>, which sets up JPA, and <b>import.sql</b> which Hibernate, the JPA provider in WildFly, will use to load the initial users into the application when the application starts. We discussed both of these files in detail in The <b>greeter example in depth</b>, and these are largely the same.<br><br>"
        }
      ]
    },
    {
      "title": "__default.xhtml__",
      "paragraphs": [
        {
          "text": "<br>Next, let’s take a look at the JSF view the user sees. As usual, we use a template to provide the sidebar and footer. This one lives in <b>WEB-INF/templates/default.xhtml</b>: <br><br> We have a common &LThead&GT element, where we define styles and more.",
          "action": {
            "label": "Open default.xhtml at line 22",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/webapp/WEB-INF/templates/default.xhtml",
              "line": 22
            }
          }
        },
        {
          "text": "<br>The content is inserted here, and defined by views using this template.",
          "action": {
            "label": "Open default.xhtml at line 32",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/webapp/WEB-INF/templates/default.xhtml",
              "line": 32
            }
          }
        }
    ]
},
        {
          "title": "__index.xhtml__",
          "paragraphs": [
            {
                "text": "<br>That leaves the main page, index.xhtml, in which we place the content unique to the main page: <br><br> The JSF form allows us to register new users. There should be one already created when the application started.",
                "action": {
                    "label": "Open index.xhtml at line 33",
                    "actionId": "open-file",
                    "parameters": {
                      "file": "src/main/webapp/index.xhtml",
                      "line": 33
                    }
                }
            },
            {
                "text": "<br>The application uses Bean Validation to validate data entry. The error messages from Bean Validation are automatically attached to the relevant field by JSF, and adding a messages JSF component will display them.",
                "action": {
                        "label": "Open index.xhtml at line 38",
                        "actionId": "open-file",
                        "parameters": {
                          "file": "src/main/webapp/index.xhtml",
                          "line": 39
                        }
                    }
            },
            {
                "text": "<br>Email validation",
                "action": {
                        "label": "Open index.xhtml at line 42",
                        "actionId": "open-file",
                        "parameters": {
                          "file": "src/main/webapp/index.xhtml",
                          "line": 43
                        }
                    }
            },
            {
                "text": "<br>Phone number validation",
                "action": {
                        "label": "Open index.xhtml at line 47",
                        "actionId": "open-file",
                        "parameters": {
                          "file": "src/main/webapp/index.xhtml",
                          "line": 47
                        }
                    }
            },
            {
                  "text": "<br>This application exposes REST endpoints for each registered member. The application helpfully displays the URL to the REST endpoint on this page. ",
                  "action": {
                    "label": "Open index.xhtml at line 86",
                    "actionId": "open-file",
                    "parameters": {
                      "file": "src/main/webapp/index.xhtml",
                      "line": 86
                    }
                  }
            }
          ]
        },
    {
      "title": "__Member.java__",
      "paragraphs": [
        {
            "text": "<br>Next, let’s take a look at the Member entity, before we look at how the application is wired together:<br><br>As usual with JPA, we define that the class is an entity by adding @Entity",
            "action": {
                    "label": "Open Member.java at line 37",
                    "actionId": "open-file",
                    "parameters": {
                      "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java",
                      "line": 37
                    }
                }
        },
        {
            "text": "<br>Members are exposed as a RESTful service using JAX-RS. We can use JAXB to map the object to XML and to do this we need to add @XmlRootElement.",
            "action": {
                    "label": "Open Member.java at line 38",
                    "actionId": "open-file",
                    "parameters": {
                      "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java",
                      "line": 38
                    }
            }
        },
        {
            "text": "<br>Bean Validation allows constraints to be defined once (on the entity) and applied everywhere. Here we constrain the person's name to a certain size and regular expression. ",
            "action": {
                    "label": "Open Member.java at line 46",
                    "actionId": "open-file",
                    "parameters": {
                      "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java",
                      "line": 46
                    }
                }
        },
        {
            "text":"<br>Hibernate Validator also offers some extra validations such as @Email. ",
            "action": {
                    "label": "Open Member.java at line 53",
                    "actionId": "open-file",
                    "parameters": {
                      "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java",
                      "line": 53
                    }
                }
        },
        {
          "text": "<br>@Digits, @NotNull and @Size are further examples of constraints. ",
          "action": {
            "label": "Open Member.java at line 56",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java",
              "line": 56
            }
          }
        }
      ]
    },
    {
      "title": "__MemberRepository.java__",
      "paragraphs": [
        {
            "text": "<br>Let’s take a look at MemberRepository, which is responsible for interactions with the persistence layer:<br> The bean is application scoped, as it is a singleton.",
            "action": {
                    "label": "Open MemberRepository.java at line 29",
                    "actionId": "open-file",
                    "parameters": {
                      "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java",
                      "line": 29
                    }
                }
        },
        {
            "text": "<br>The entity manager is injected, to allow interaction with JPA.",
            "action": {
                    "label": "Open MemberRepository.java at line 32",
                    "actionId": "open-file",
                    "parameters": {
                      "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java",
                      "line": 32
                    }
                }
        },
        {
            "text": "<br>The JPA criteria api is used to load a member by his or her unique identifier, email address.",
            "action": {
                    "label": "Open MemberRepository.java at line 40",
                    "actionId": "open-file",
                    "parameters": {
                      "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java",
                      "line": 40
                    }
                }
        },
        {
          "text": "<br>The criteria api can also be used to load lists of entities .",
          "action": {
            "label": "Open MemberRepository.java at line 51",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java",
              "line": 51
            }
          }
        }
      ]
    },
    {
      "title": "__MemberListProducer.java__",
      "paragraphs": [
        {
            "text": "<br>Next, let’s take a look at MemberListProducer, which is responsible for building the list of members, ordered by name. It uses JPA 2 criteria to do this.<br><br>This bean is request scoped, meaning that any fields (such as members) will be stored for the entire request.",
            "action": {
                    "label": "Open MemberListProducer.java at line 30",
                    "actionId": "open-file",
                    "parameters": {
                    "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java",
                      "line": 30
                    }
            }
        },
        {
            "text": "<br>The MemberRepository is responsible for interactions with the persistence layer",
            "action": {
                    "label": "Open MemberListProducer.java at line 34",
                    "actionId": "open-file",
                    "parameters": {
                    "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java",
                      "line": 34
                    }
            }
        },
        {
            "text": "<br>The list of members is exposed as a producer method. It's also available via EL. ",
            "action": {
                    "label": "Open MemberListProducer.java at line 40",
                    "actionId": "open-file",
                    "parameters": {
                    "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java",
                      "line": 40
                    }
            }
        },
        {
          "text": "<br>The observer method is notified whenever a member is created, removed, or updated. This allows us to refresh the list of members whenever they are needed. This is a good approach as it allows us to cache the list of members, but keep it up to date at the same time.",
          "action": {
            "label": "Open MemberListProducer.java at line 46",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java",
              "line": 46
            }
          }
        }
      ]
    },
    {
      "title": "__MemberRegistration.java__",
      "paragraphs": [
        {
            "text": "<br><br>Let’s now look at MemberRegistration, the class that allows us to create new members from the JSF page. <br><br> This bean requires transactions as it needs to write to the database. Making this an EJB gives us access to declarative transactions - much simpler than manual transaction control! ",
            "action": {
                    "label": "Open MemberRegistration.java at line 28",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java",
                      "line": 28
                    }
            }
        },
        {
            "text": "<br>Here we inject a JDK logger, defined in the Resources class.",
            "action": {
                    "label": "Open MemberRegistration.java at line 31",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java",
                      "line": 31
                    }
            }
        },
        {
          "text": "An event is sent every time a member is updated. This allows other pieces of code (in this quickstart the member list is refreshed) to react to changes in the member list without any coupling to this class. ",
          "action": {
            "label": "Open MemberRegistration.java at line 43",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java",
              "line": 43
            }
          }
        }
      ]
    },
    {
      "title": "__Resources.java__",
      "paragraphs": [
        {
            "text": "<br>Now, let's take a look at the Resources class, which provides resources such as the entity manager. CDI recommends using 'resource producers', as we do in this example, to alias resources to CDI beans, allowing for a consistent style throughout our application:<br><br>We use the 'resource producer' pattern, from CDI, to 'alias' the old fashioned @PersistenceContext injection of the entity manager to a CDI style injection. This allows us to use a consistent injection style (@Inject) throughout the application. ",
            "action": {
                    "label": "Open MemberRegistration.java at line 43",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java",
                      "line": 43
                    }
            }
        },
        {
            "text": "<br>We expose a JDK logger for injection. In order to save a bit more boiler plate, we automatically set the logger category as the class name! ",
            "action": {
                    "label": "Open MemberRegistration.java at line 47",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java",
                      "line": 47
                    }
            }
        },
        {
            "text": "<br>We expose the FacesContext via a producer method, which allows it to be injected. If we were adding tests, we could also then mock it out.",
            "action": {
                    "label": "Open MemberRegistration.java at line 52",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java",
                      "line": 52
                    }
            }
        },
        {
          "text": "<br>If you want to define your own datasource, take a look at the Administration Guide for WildFly here: https://docs.jboss.org/author/display/WFLY8/Admin+Guide#AdminGuide-DatasourceDefinitions/"
        }
      ]
    },
    {
      "title": "__MemberController.java__",
      "paragraphs": [
        {
            "text": "<br>Of course, we need to allow JSF to interact with the services. The MemberController class is responsible for this:<br><br>The MemberController class uses the @Model stereotype, which adds @Named and @RequestScoped to the class. ",
            "action": {
                    "label": "Open MemberControllern.java at line 34",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
                      "line": 34
                    }
            }
        },
        {
            "text": "<br>The FacesContext is injected, so that messages can be sent to the user.",
            "action": {
                    "label": "Open MemberController.java at line 37",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
                      "line": 37
                    }
            }
        },
        {
            "text": "<br>The MemberController bean is injected, to allow the controller to interact with the database.",
            "action": {
                    "label": "Open MemberRegistration.java at line 40",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
                      "line": 40
                    }
            }
        },
        {
            "text": "<br>The Member class is exposed using a named producer field, which allows access from JSF. Note that the named producer field has dependent scope, so every time it is injected, the field will be read ",
            "action": {
                    "label": "Open MemberController.java at line 43",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
                      "line": 43
                    }
            }
        },
        {
            "text": "<br>The @PostConstruct annotation causes a new member object to be placed in the newMember field when the bean is instantiated.",
            "action": {
                    "label": "Open MemberController.java at line 47",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
                      "line": 47
                    }
            }
        },
        {
            "text": "<br>When the register method is called, the newMember object is passed to the persistence service.",
            "action": {
                    "label": "Open MemberController.java at line 54",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
                      "line": 54
                    }
            }
        },
        {
            "text":"<br>We also send a message to the user, to give them feedback on their actions.",
            "action": {
                    "label": "Open MemberController.java at line 56",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
                      "line": 56
                    }
            }
        },
        {
          "text": "<br>Finally, we replace the newMember with a new object, thus blanking out the data the user has added so far. This works as the producer field is dependent scoped.",
          "action": {
            "label": "Open MemberController.java at line 57",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java",
              "line": 57
            }
          }
        }
      ]
    },
    {
      "title": "__JAX-RS__",
      "paragraphs": [
        {
          "text": "<br><br>Before we wrap up our tour of the kitchensink example application, let’s take a look at how the JAX-RS endpoints are created. Firstly, {<b>JaxRSActivator</b>}}, which extends <b>Application</b> and is annotated with <b>@ApplicationPath</b>, is the Java EE 6 <b>no XML</b> approach to activating JAX-RS.<br><br>JaxRsActivator.java",
          "action": {
            "label": "Open JaxRsActivator.java at line 30",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java",
              "line": 30
            }
          }
        }
      ]
    },
    {
      "title": "__MemberResourceRESTService.java__",
      "paragraphs": [
        {
            "text":"<br>The real work goes in MemberResourceRESTService, which produces the endpoint:<br><br>The @Path annotation tells JAX-RS that this class provides a REST endpoint mapped to rest/members (concatenating the path from the activator with the path for this endpoint). ",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 52",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 52
                    }
            }
        },
        {
            "text": "<br>The bean is request scoped, as JAX-RS interactions typically don&apos;t hold state between requests.",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 53",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 53
                    }
            }
        },
        {
            "text":"<br>JAX-RS endpoints are CDI enabled, and can use CDI-style injection. ",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 56",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 56
                    }
            }
        },
        {
            "text":"<br>CDI allows us to inject a Bean Validation Validator instance, which is used to validate the POSted member before it is persisted.",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 59",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 59
                    }
            }
        },
        {
            "text":"<br>MemberRepository is injected to allow us to query the member database ",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 62",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 62
                    }
            }
        },
        {
            "text":"<br>MemberRegistration is injected to allow us to alter the member database.",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 65",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 65
                    }
            }
        },
        {
            "text":"<br>The listAllMembers() method is called when the raw endpoint is accessed and offers up a list of endpoints. Notice that the object is automatically marshalled to JSON by RESTEasy (the JAX-RS implementation included in WildFly).",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 68",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 68
                    }
            }
        },
        {
            "text":"<br>The lookupMemberById() method is called when the endpoint is accessed with a member id parameter appended (for example rest/members/1). Again, the object is automatically marshalled to JSON by RESTEasy.",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 74",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 74
                    }
            }
        },
        {
            "text":"<br>createMember() is called when a POST is performed on the URL. Once again, the object is automatically unmarshalled from JSON.",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 89",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 89
                    }
            }
        },
        {
            "text":"<br>In order to ensure that the member is valid, we call the validateMember method, which validates the object, and adds any constraint violations to the response. These can then be handled on the client side, and displayed to the user.",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 136",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 136
                    }
            }
        },
        {
            "text": "<br>The object is then passed to the MemberRegistration service to be persisted.",
            "action": {
                    "label": "Open MemberResourceRESTService.java at line 100",
                    "actionId": "open-file",
                    "parameters": {
                 "file":"src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
                      "line": 100
                    }
            }
        },
        {
          "text": "<br>We then handle any remaining issues with validating the object, which are raised when the object is persisted.",
          "action": {
            "label": "Open MemberResourceRESTService.java at line 104",
            "actionId": "open-file",
            "parameters": {
              "file": "src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java",
              "line": 104
            }
          }
        }
      ]
    },
    {
      "title": "__BUILD, DEPLOY and RUN the application with your changes__",
      "paragraphs": [
        {
          "text": "<br>Click on the button below to build, deploy and restart JBoss to see any changes you’ve made take effect.",
          "action": {
            "label": "Click to build, deploy and restart JBoss",
            "actionId": "run-command",
            "parameters": {
              "name": "Kitchen_sink: Stop, build, deploy and start JBoss"
            }
          }
        },
        {
           "text": "<br>Or, you can select the command you want to run from the drop-down menu at the top of the navigation bar <br><img src=\"https://raw.githubusercontent.com/hwindzio/kitchensink-example-master-src-main-webapp-resources-gfx-/master/command3.PNG\" height=\"60\" width=\"250\">"
        }
      ]
    }
  ]
}


